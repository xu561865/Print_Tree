# -*- coding: utf-8 -*-


import sys
import math
import numpy


class node():
    def __init__(self, _v):
        self.value = _v
        self.left = None
        self.right = None

    # 有重复放到右子树
    def insert(self, _v):
        if self.value > _v:
            if self.left is not None:
                self.left.insert(_v)
            else:
                self.left = node(_v)
        else:
            if self.right is not None:
                self.right.insert(_v)
            else:
                self.right = node(_v)


def tree_deep(root):
    if root is None:
        return 0
    left = tree_deep(root.left)+1
    right = tree_deep(root.right)+1
    return left if left > right else right


def getNodeNums(root):
    if not root:
        return 0
    lnums = getNodeNums(root.left)
    rnums = getNodeNums(root.right)
    return lnums + rnums + 1


def print_values_for_line(poses, values):
    str_line = ""
    for i, pos in enumerate(poses):
        offset = 0
        if i is not 0:
            offset = pos - poses[i - 1] - 1

        while offset >= 1:
            str_line += ' '
            offset -= 1
        str_line += str(values[i])
    # print("123456789")
    print(str_line)


def bst_cache(bst, tree_depth, cur_depth, pos_vec, parent_pos, factor):
    offset = math.pow(2, cur_depth - 1)

    if parent_pos is None:
        pos = offset
    if factor == "left":
        pos = parent_pos - offset
    if factor == "right":
        pos = parent_pos + offset

    pos_vec[tree_depth - cur_depth][int(pos) - 1] = bst.value

    if bst.left is not None:
        bst_cache(bst.left, tree_depth, cur_depth - 1, pos_vec, pos, "left")
    if bst.right is not None:
        bst_cache(bst.right, tree_depth, cur_depth - 1, pos_vec, pos, "right")


def print_bst(bst):
    depth = tree_deep(bst)
    length = getNodeNums(bst)
    pos_vec = numpy.zeros((depth, int(math.pow(2, depth) - 1)), int)

    bst_cache(bst, depth, depth, pos_vec, None, None)

    j = 0
    while j <= depth - 1:
        str_line = ""
        i = 0
        while i <= int(math.pow(2, depth) - 1) - 1:
            if pos_vec[j][i] == 0:
                str_line += ' '
            else:
                str_line += str(pos_vec[j][i])
            i += 1
        print(str_line)
        j += 1


def main():
    arr = [5, 1, 9, 2, 8, 3, 7, 4, 6]
    bst = node(arr[0])
    for i in range(1, len(arr)):
        bst.insert(arr[i])
    # print(tree_deep(bst))

    # test
    # poses = [1, 3, 5, 7]
    # values = [1, 3, 5, 7]
    # print_values_for_line(poses, values)

    print_bst(bst)


if __name__ == '__main__':
    main()
